/// Randomly animates a number of nth-children.
///
/// @access public
/// @group mixins
///
/// @param {Number} $num-elements - The number of elements to animate
/// @param {String} $prop-to-animate - The property of those elements which should be animated
/// @param {List} $animation-props - The animation properties to use for the animation
/// @param {Number} $steps - The number of times each element will be animated
/// @param {String} $function-name - The randomizing function to be called for use in the animation
/// @param {String} $args... - Parameters to be passed to the $function-name function
///
/// @example scss
/// // SCSS
/// // assuming that there are 2 spans with a class of 'demo', and that they are collectively the first (or only) children of their parent:
///  span.demo {
///    @include random-animate(3, color, 3s ease, 3, random-rgba, (1, 1, 1), .7);
///  }
///
/// @example css
/// // CSS
///  span:nth-child(2) {
///    -webkit-animation: ur8mqcnb1 3s ease;
///    animation: ur8mqcnb1 3s ease;
///  }
///  @-webkit-keyframes ur8mqcnb1 {
///    0% {
///      color: rgba(133, 150, 105, 0.7);
///    }
///    50% {
///      color: rgba(202, 105, 191, 0.7);
///    }
///    100% {
///      color: rgba(59, 238, 72, 0.7);
///    }
///  }
///  @keyframes ur8mqcnb1 {
///    0% {
///      color: rgba(25, 229, 252, 0.7);
///    }
///    50% {
///      color: rgba(128, 54, 10, 0.7);
///    }
///    100% {
///      color: rgba(49, 146, 146, 0.7);
///    }
///  }
///  span:nth-child(1) {
///    -webkit-animation: ur8mqcnba 3s ease;
///    animation: ur8mqcnba 3s ease;
///  }
///  @-webkit-keyframes ur8mqcnba {
///    0% {
///      color: rgba(61, 183, 140, 0.7);
///    }
///    50% {
///      color: rgba(169, 197, 140, 0.7);
///    }
///    100% {
///      color: rgba(241, 51, 216, 0.7);
///    }
///  }
///  @keyframes ur8mqcnba {
///    0% {
///      color: rgba(47, 37, 255, 0.7);
///    }
///    50% {
///      color: rgba(192, 105, 111, 0.7);
///    }
///    100% {
///      color: rgba(70, 183, 226, 0.7);
///    }
///  }
@mixin random-animate($num-elements, $prop-to-animate, $animation-props, $steps, $function-name, $args...) {
  @if (not is-int($steps)) or ($steps < 2) {
    @include _alert('@mixin random-animate: $steps must be an integer with a value of at least 1.');
  }

  @if (not is-int($num-elements)) or ($num-elements < 1) {
    @include _alert('@mixin random-animate: $num-elements must be a positive integer.');
  }

  @if not function-exists($function-name) {
    @include _alert('@mixin random-animate: The given function name, `#{$function-name}`, does not exist');
  }

  $counter: 1;
  @while $num-elements >= $counter {
    $animation-name: unique-id();


    // Generate the proper number and % of keyframe steps
    $step-list: ();
    $steps-to-add: $steps;

    @while $steps-to-add > 0 {
      $step-list: join(floor(($steps-to-add - 1) * (100 / ($steps - 1))), $step-list);
      $steps-to-add: $steps-to-add - 1;
    }

    // Generate the results of the call before-hand to preserve
    // results across prefixes
    $steps-length: length($step-list);
    $result-list: ();

    @for $i from 1 through $steps-length {
      $result-list: append($result-list, (call($function-name, $args...)));
    }

    // Generate the keyframes using the above-generated information
    &:nth-child(#{$counter}) {
      @include keyframes($animation-name) {

        @for $i from 1 through $steps-length {
          #{nth($step-list, $i)}% {
            #{$prop-to-animate}: nth($result-list, $i);
          }
        }
      }

      // Call the keyframes
      @if $_randomize-prefixes {
        -webkit-animation: $animation-name $animation-props;
      }
      animation: $animation-name $animation-props;
    }

    $counter: $counter + 1;
  }
}