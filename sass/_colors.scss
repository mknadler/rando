/// Generates a random color. By default, it is unbiased, and the colors will almost certainly be translucent. Optionally, you can pass a list of multipliers to weigh the output. For instance, if you pass a red modifier of 2, the function will multiply the maximum red value, 255, by 2, getting 510, find a random number between 1 and 510, and, finally, return that number as the R value, while clamping any number over 255 to 255. This means that, with a $red multiplier of 2, there is a ~50% chance of the red value being 255; a ~67% chance that a $red value of 3 will result in a red value of 255; and so on.
/// To generate a hex value instead of an RGBa value, pass an $opacity value of 1.
/// @param {List} $multiplier (1, 1, 1) - Red, green, and blue multipliers
/// @param {Number} $opacity (1) - Whether the output should be opaque
///
/// @access public
/// @group random color functions
///
/// @example scss
/// // SCSS
/// span {
///  color: random-color(3, 1, 1);
/// }
///
/// @example css
/// // CSS
/// span {
///   color: rgba(229, 240, 108);
/// }
@function random-color($multiplier: (1, 1, 1), $opacity: 1) {
  @each $val in $multiplier {
    @if $val <= 0 or $val == 0 {
      @error '@function random-color: RGBa multipliers must be positive.';
    }
  }

  $r: round(255 * nth($multiplier, 1));
  $g: round(255 * nth($multiplier, 2));
  $b: round(255 * nth($multiplier, 3));

  @if type-of($opacity) == 'number' {
    @if $opacity < 0 or $opacity > 1 {
      @warn '@function random-color: opacity should be a number between 0 and 1: `#{$opacity}` given. As a result, the color will be fully opaque.';
      $opacity: 1;
    }

    @return rgba(random($r), random($g), random($b), $opacity);
  }

  @return rgba(random($r), random($g), random($b), random());
}
