/// Given a list, returns a random item from that list.
/// @param {List} $value-list - The list of values to randomly select from
///
/// @access public
/// @group random list/map functions
///
/// @example scss
/// // SCSS
/// div {
///   animation: 2s ease random-value(ease ease-in-out linear);
///   border-radius: random-value((2rem, 5px, 10%));
/// }
///
/// @example css
/// // CSS
/// div {
///   animation: 2s ease linear;
///   border-radius: 5px;
/// }
@function random-value($value-list...) {
  @if type-of(nth($value-list, 1)) == 'list' and length($value-list) == 1 {
    $value-list: nth($value-list, 1);
  }

  @return nth($value-list, random(length($value-list)));
}


/// Given a map, including maps that have maps inside of maps inside of maps inside of them (and so on), returns a random value from that map.
///
/// @access public
/// @group random list/map functions
///
/// @param {Map} $map - The map to be parsed
///
/// @example scss
/// // SCSS
/// div {
///   animation: 2s ease random-value(ease ease-in-out linear);
///   border-radius: random-value((2rem, 5px, 10%));
/// }
///
/// @example css
/// // CSS
/// div {
///   animation: 2s ease linear;
///   border-radius: 5px;
/// }
@function random-value-from-map($map){
  @return random-value(map-to-list($map));
}


/// Given a list, applies a Fisher-Yates shuffle to that list.
/// @param {list} $list - The list to shuffle
///
/// @access public
/// @group random list/map functions
///
/// @example scss
/// // SCSS
/// $colors: red, orange, yellow, blue, green;
/// $colors: shuffle($colors);
/// div:after {
///   content: $colors;
/// }
///
/// @example css
/// // CSS
/// div: after {
///   content: blue, yellow, red, orange, green;
/// }
@function shuffle($list) {
  $list-length: length($list);

  @while($list-length > 0) {
    $rand: random($list-length);
    $temp: nth($list, $rand);
    $list: set-nth($list, $rand, nth($list, $list-length));
    $list: set-nth($list, $list-length, $temp);
    $list-length: $list-length - 1;
  }

  @return $list;
}
