/// Provides `@warn` fallback for `@error` so as to not, ironically, throw errors on older versions of Sass. http://www.sitepoint.com/using-error-responsibly-in-sass/
/// @param { String } $message - The message to be logged
///
/// @access private
/// @group utilities
@function _alert($message) {
  @if feature-exists('at-error') != true {
    @warn $message;
  } @else {
    @error $message;
  }
}

/// Provides a mixin for access to the alert @function
/// @param { String } $message - The message to be logged
///
/// @access private
/// @group utilities
@mixin _alert($message) {
  @if _alert($message) {}
}

/// Determines if if a passed number is 1. a number and 2. an integer; if so, returns 'true'; if not, returns 'false'
/// @param { Number | String | Boolean | List | Map } $value - The parameter to check the type / integerity of
///
/// @group utilities
@function is-int($value){
  @if (type-of($value) == 'number') and ($value % 1 == 0) {
    @return true;
  } @else {
    @return false;
  }
}


/// Applies vendor prefixes to @keyframes
/// @param {String} $name - The name of the animation
///
/// @group utilities
///
@mixin keyframes($name) {
  @if $_randomize-prefixes {
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @keyframes #{$name} {
    @content;
  }
}


/// Clamps a generated number in between a minimum and maximum value
/// @param {Number} $num - The number to check
/// @param {Number} $min (0) - The minimum number of the range
/// @param {Number} $max (1) - The maximum number of the range
///
/// @group utilities
///
@function limit($num, $min: 0, $max: 1) {
  @if $max < $min {
    $temp: $min;
    $min: $max;
    $max: $temp;
  }
  @if $num <= $max and $num >= $min { @return $num; }
  @if $num < $min { @return $min; }
  @if $num > $max { @return $max; }
}


/// When passed a map, returns a list of every value in that map, no matter how deeply nested that map is.
/// @param {String} $map - The map to convert into a list
///
/// @group utilities
///
@function map-to-list($map){
  $carbon: $map;
  $keys: map-keys($carbon);
  $mapvals: ();
  $plainvals: ();
  $restart: true;

  @while $restart == true {

    @each $key in $keys {
      @if type-of(map-get($carbon, $key)) == 'map'{
        $mapvals: map-merge($mapvals, map-get($carbon, $key));
        $mapvals: map-remove($mapvals, $key);
        $carbon: map-remove($carbon, $key);
      }

      @else {
        $plainvals: append($plainvals, map-get($carbon, $key));
        @if map-has-key($mapvals, $key){
          $mapvals: map-remove($mapvals, $key);
        }

        $carbon: map-remove($carbon, $key);
      }
    }

    $carbon: map-remove($carbon, map-keys($carbon));
    $carbon: map-merge($mapvals, $carbon);
    $keys: map-keys($carbon);

    @if length($mapvals) == 0 {
      $restart: false;
    }
  }

  @return $plainvals;
}